// Code generated by mockery v2.45.1. DO NOT EDIT.

package mocks

import (
	tls "crypto/tls"

	mock "github.com/stretchr/testify/mock"
)

// CertificateHandlerFunc is an autogenerated mock type for the CertificateHandlerFunc type
type CertificateHandlerFunc struct {
	mock.Mock
}

type CertificateHandlerFunc_Expecter struct {
	mock *mock.Mock
}

func (_m *CertificateHandlerFunc) EXPECT() *CertificateHandlerFunc_Expecter {
	return &CertificateHandlerFunc_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: _a0
func (_m *CertificateHandlerFunc) Execute(_a0 *tls.ClientHelloInfo) (*tls.Certificate, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 *tls.Certificate
	var r1 error
	if rf, ok := ret.Get(0).(func(*tls.ClientHelloInfo) (*tls.Certificate, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*tls.ClientHelloInfo) *tls.Certificate); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tls.Certificate)
		}
	}

	if rf, ok := ret.Get(1).(func(*tls.ClientHelloInfo) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CertificateHandlerFunc_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type CertificateHandlerFunc_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - _a0 *tls.ClientHelloInfo
func (_e *CertificateHandlerFunc_Expecter) Execute(_a0 interface{}) *CertificateHandlerFunc_Execute_Call {
	return &CertificateHandlerFunc_Execute_Call{Call: _e.mock.On("Execute", _a0)}
}

func (_c *CertificateHandlerFunc_Execute_Call) Run(run func(_a0 *tls.ClientHelloInfo)) *CertificateHandlerFunc_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*tls.ClientHelloInfo))
	})
	return _c
}

func (_c *CertificateHandlerFunc_Execute_Call) Return(_a0 *tls.Certificate, _a1 error) *CertificateHandlerFunc_Execute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CertificateHandlerFunc_Execute_Call) RunAndReturn(run func(*tls.ClientHelloInfo) (*tls.Certificate, error)) *CertificateHandlerFunc_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewCertificateHandlerFunc creates a new instance of CertificateHandlerFunc. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCertificateHandlerFunc(t interface {
	mock.TestingT
	Cleanup(func())
}) *CertificateHandlerFunc {
	mock := &CertificateHandlerFunc{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
