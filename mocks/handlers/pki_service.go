// Code generated by mockery v2.45.1. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	pki "go.pixelfactory.io/needle/internal/app/pki"
)

// PKIService is an autogenerated mock type for the PKIService type
type PKIService struct {
	mock.Mock
}

type PKIService_Expecter struct {
	mock *mock.Mock
}

func (_m *PKIService) EXPECT() *PKIService_Expecter {
	return &PKIService_Expecter{mock: &_m.Mock}
}

// GetOrCreate provides a mock function with given fields: name
func (_m *PKIService) GetOrCreate(name string) (*pki.InternalCert, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for GetOrCreate")
	}

	var r0 *pki.InternalCert
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*pki.InternalCert, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) *pki.InternalCert); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pki.InternalCert)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PKIService_GetOrCreate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrCreate'
type PKIService_GetOrCreate_Call struct {
	*mock.Call
}

// GetOrCreate is a helper method to define mock.On call
//   - name string
func (_e *PKIService_Expecter) GetOrCreate(name interface{}) *PKIService_GetOrCreate_Call {
	return &PKIService_GetOrCreate_Call{Call: _e.mock.On("GetOrCreate", name)}
}

func (_c *PKIService_GetOrCreate_Call) Run(run func(name string)) *PKIService_GetOrCreate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *PKIService_GetOrCreate_Call) Return(_a0 *pki.InternalCert, _a1 error) *PKIService_GetOrCreate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PKIService_GetOrCreate_Call) RunAndReturn(run func(string) (*pki.InternalCert, error)) *PKIService_GetOrCreate_Call {
	_c.Call.Return(run)
	return _c
}

// NewPKIService creates a new instance of PKIService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPKIService(t interface {
	mock.TestingT
	Cleanup(func())
}) *PKIService {
	mock := &PKIService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
