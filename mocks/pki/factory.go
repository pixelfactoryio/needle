// Code generated by mockery v2.45.1. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	pki "go.pixelfactory.io/needle/internal/app/pki"
)

// Factory is an autogenerated mock type for the Factory type
type Factory struct {
	mock.Mock
}

type Factory_Expecter struct {
	mock *mock.Mock
}

func (_m *Factory) EXPECT() *Factory_Expecter {
	return &Factory_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: name
func (_m *Factory) Create(name string) (*pki.InternalCert, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *pki.InternalCert
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*pki.InternalCert, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) *pki.InternalCert); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pki.InternalCert)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Factory_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type Factory_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - name string
func (_e *Factory_Expecter) Create(name interface{}) *Factory_Create_Call {
	return &Factory_Create_Call{Call: _e.mock.On("Create", name)}
}

func (_c *Factory_Create_Call) Run(run func(name string)) *Factory_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Factory_Create_Call) Return(_a0 *pki.InternalCert, _a1 error) *Factory_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Factory_Create_Call) RunAndReturn(run func(string) (*pki.InternalCert, error)) *Factory_Create_Call {
	_c.Call.Return(run)
	return _c
}

// NewFactory creates a new instance of Factory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFactory(t interface {
	mock.TestingT
	Cleanup(func())
}) *Factory {
	mock := &Factory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
