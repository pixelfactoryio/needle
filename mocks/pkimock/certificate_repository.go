// Code generated by mockery v2.44.2. DO NOT EDIT.

package pkimock

import (
	mock "github.com/stretchr/testify/mock"
	pki "go.pixelfactory.io/needle/internal/services/pki"
)

// CertificateRepository is an autogenerated mock type for the CertificateRepository type
type CertificateRepository struct {
	mock.Mock
}

// Get provides a mock function with given fields: name
func (_m *CertificateRepository) Get(name string) (*pki.Certificate, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *pki.Certificate
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*pki.Certificate, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) *pki.Certificate); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pki.Certificate)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store provides a mock function with given fields: certificate
func (_m *CertificateRepository) Store(certificate *pki.Certificate) error {
	ret := _m.Called(certificate)

	if len(ret) == 0 {
		panic("no return value specified for Store")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*pki.Certificate) error); ok {
		r0 = rf(certificate)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewCertificateRepository creates a new instance of CertificateRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCertificateRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *CertificateRepository {
	mock := &CertificateRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
